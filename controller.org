

{{{modification-time(FORMAT, VC)}}}

* Objective
To define a useful library for people to control the robot without worrying too much about the low level implementation.
Effectively, think high level and let my library deal with low level control of motor controllers.
* Direction
** Compass
So the motor controller has directions expressed as numbers but I'd rather have programmers use more intuitive units.
This is why the convertDirectionsToNumber function exists - you can think in terms on North, South or North-East and write code like that.

Keep in mind that all directions are in terms of the robot's frame of reference and not the frame of reference of the arena.

#+CAPTION: Compass directions and their corresponding number
|-----------+--------|
| Direction | Number |
|-----------+--------|
| N         |      1 |
| NE        |      2 |
| E         |      3 |
| SE        |      4 |
| S         |      5 |
| SW        |      6 |
| W         |      7 |
| NW        |      8 |
| CW        |      9 |
| CCW       |     10 |
|-----------+--------|

#+NAME: direction
#+BEGIN_SRC python :tangle compass.py :noweb yes
class Compass(object):
  N, NE, E, SE, S, SW, W, NW = range(1,9)
  CW, CCW = range(9,11)

  <<directionInit>>
  <<directionRepr>>
  <<directionConvert>>

# Defining keywords for people to use
# When this package is imported, the user should be able to use the keywords without worrying about refering to the correct class name.
# In short, they can use N, NW and so on without saying CompassDirection.N or anything like that.
N   = Compass.N
NE  = Compass.NE
E   = Compass.E
SE  = Compass.SE
S   = Compass.S
SW  = Compass.SW
W   = Compass.W
NW  = Compass.NW
CW  = Compass.CW
CCW = Compass.CCW
#+END_SRC
*** init
#+NAME: directionInit
#+BEGIN_SRC python
def __init__(self,value):
  if isinstance(value,basestring):
    self.value = Compass.convert(value) 
    #If the user enters in a string instead of a number or the class defined static variables, convert it to the string.
  elif 1 <= value <= 10:
    self.value = value
  else:
    raise ValueError("Compass is given invalid argument")
#+END_SRC
*** repr
Changing the representation from default value since it's best if the value returned is a cardinal direction with a prefix stating it's a compass direction
#+NAME: directionRepr
#+BEGIN_SRC python
def __repr__(self):
  return "Compass Direction" + Compass.convert(self.value)  #Should return the string representation of the value
#+END_SRC

*** convert
This is the real meat of the function and I wouldn't be surprised if this was the only function used. Defined as a static function to avoid instantiating an object for no reason.

#+CAPTION: Example of Compass.convert used.
#+BEGIN_EXAMPLE
Compass.convert(1)   == "N"
Compass.convert("N") == 1
#+END_EXAMPLE

#+NAME: directionConvert
#+BEGIN_SRC python
  @staticmethod
  def convert(direction = None):
    #Sanitizing inputs
    if direction == None:
        raise ValueError('Compass direction is not given. Please enter valid input')

    # If the input is a number, return a string
    if 1 <= direction <= 10:
       directionList = {
        1:"N",
        2:"NE",
        3:"E",
        4:"SE",
        5:"S",
        6:"SW",
        7:"W",
        8:"NW",
        9:"CW",
        10:"CCW"
       }
       direction_raw = directionList.get(direction, None)
       if direction_raw is not None:
         return direction_raw
       else:
         raise ValueError('Compass direction should be a valid integer number from 1 to 10')
    # If the input is a string, return a number

    if isinstance(direction, basestring):
      directionList = {
          # Actual Directions
          "N"   : Compass.N,
          "NE"  : Compass.NE,
          "E"   : Compass.E,
          "SE"  : Compass.SE,
          "S"   : Compass.S,
          "SW"  : Compass.SW,
          "W"   : Compass.W,
          "NW"  : Compass.NW,
          # Spins the robot
          "CW"  : Compass.CW,
          "CCW" : Compass.CCW
       }
      direction_raw = directionList.get(direction, None)
      if 1 <= direction_raw <= 10:
        return direction_raw
      else:
        raise ValueError('Compass direction should be a valid string as an input.')
       # Somehow, you've reached here. This should not happen but whatever, raise the error
      raise ValueError('Invalid input - input entered is neither string nor number')
#+END_SRC

** COMMENT Vector

So we're going to implment a quick and dirty wrapper around numpy's vectors so that I can use them wherever I need vectors. 
Also, I might change from numpy to a another library but who knows.

#+BEGIN_SRC python :tangle direction/vector.py
import numpy

class Vector(numpy.ndarray):

    def __new__(cls, x=None, y=None, info=None):

        # Sanitizing x and y values
        if x == None or y == None:
          raise VectorError('Incomplete vector input')

        def is_number(s):
            try:
                float(s)
                return True
            except VectorError:
                return False
        
        if not (is_number(x) and is_number(y)):
          raise VectorError('Incorrect vector input. Please use numbers only')
      
        # We need to make ndarray instance using x and y values.
        input_array = numpy.array([x,y])

        # We first cast to be our class type
        obj = numpy.asarray(input_array).view(cls)
        # add the new attribute to the created instance
        obj.info = info
        # Finally, we must return the newly created object:
        return obj

    def __array_finalize__(self, obj):
        # see InfoArray.__array_finalize__ for comments
        if obj is None: return
        self.info = getattr(obj, 'info', None)

    def __repr__(self):
        return "< "+str(self[0])+" "+str(self[1])+" >"

    def mag(self):
      return numpy.sqrt(self.dot(self))

if __name__=="__main__":
    start = Vector(1,2)
    finish = Vector(4,5)

    distance = finish - start
    print(distance)
#+END_SRC
* Instruction

 So this is the function that sends instructions to the motor controller using the serial library.
 The serial port used is /dev/ttyACM0 with baud rate 9600.

- Is this where compass is useful?
Yeah! Use the compass directions instead of passing hardcoded values. Of course, I won't insist on you doing so but I'll pass a warning.

- So why are we not defining this as some kind of function? 
Because I'd like to be able to reuse commands as much as possible AND because it makes more sense to write down commands and then execute them whenever required instead of creating wrapper functions around one main function.

- Why are we logging this since we'll be using this a lot! 
The logger is to see what instructions are actually sent to the robot - I'm guessing that we'll need to look at the logs at some point even if we write perfect code.
In order to avoid filling our logs with trash, I'll add logs to a seperate file.

# I've also written a nice bash script that clears the log instead of us having to delete the file manually - it will probably be incorporated into whatever cleanup scripts the other programmers come up with.

#+NAME: Instruction
#+BEGIN_SRC python :tangle instruction.py
import logging #This is to send logs of instructions sent directly to robot.
import serial # Serial interface to talk to robot's motor controllers

logger = logging.getLogger(__name__)
logger.setLevel(logging.INFO)

# create a file handler
handler = logging.FileHandler('instruction.log')
handler.setLevel(logging.INFO)
logger.addHandler(handler)

class Instruction(object):
  <<instructionInit>>
  <<instructionExecute>>
#+END_SRC

** init
Init checks if the inputs given are good 
#+NAME: instructionInit
#+BEGIN_SRC python
def __init__(self,direction = None, power = None, time = None):
  # Serial interface. Gonna be hardcoded for now. I'm sorry, future Vi.
  self.ser = serial.Serial("/dev/ttyACM0", 9600) 

  #Ensuring that all outputs are non-empty.
  if direction == None or power == None or time == None:
    raise ValueError('Instruction is given empty arguments. Please enter valid direction, power and time.') 

  if not (0 <= power <= 100):
    raise ValueError('Instruction is given an invalid power. Power is a quantity between 0 and 100.')
  else:
    self.power = power

  if not (time >= 0):
    raise ValueError('Instruction is given an invalid time. Time must always be a positive quantity.')
  else:
    self.time = time
#+END_SRC

** execute
execute sends an instruction the motor controller using a serial port. This might be a janky way of doing things since we're parsing strings on the other end, but it's working for now.
#+NAME: instructionExecute
#+BEGIN_SRC python
def execute(self):
    
  def convertToSerialString(direction,
                            power,
                            time):
    return str(direction) + " " + str(power) + " " + str(time)
  instruction = convertToSerialString(self.direction,
                                      self.power,
                                      self.time)
  logger.info(instruction)
  self.ser.write(instruction)         #Actually send stuff to the robot.
#+END_SRC
* Coordinate

Since we'll be passing coordinates all the time, I thought it would make sense to treat it as a numpy vector to improve its efficiency.
We'll be using this in the Sensor class to return a Coordinate and it's quite likely that this will be used in a PID loop.
 #+BEGIN_SRC python :tangle coordinate.py :noweb yes
import numpy as np
class Coordinate(np.ndarray):
  <<coordinateNew>>
  <<coordinateArrayFinalize>>
  <<coordinateArrayAdd>>

if __name__=="__main__":
  start = Coordinate(1,2,0)
  finish = Coordinate(4,5,0)
   
  print("The distance between start and finish is")
  distance = finish - start
  print(distance)
#+END_SRC

** new
#+NAME: coordinateNew
#+BEGIN_SRC python :noweb yes
def __new__(cls, x,                  # Required argument - x coordinate
                 y,                  # Required argument - y coordinate
                 theta,              # Required argument - inclination of the robot with respect to the x axis.
                 info = None):              # Optional argument - Info about the numpy array in case you want to tag it with some information.


  <<coordinateNewCheck>>
  # We need to make ndarray instance using x, y & theta values.
  dimension = np.dtype({'names':  ('x',  'y',  'theta'),
                        'formats':('f8', 'f8', 'f8')})
  input_array = np.array([(x,y,theta)],dimension)
  # We first cast to be our class type
  obj = np.asarray(input_array).view(cls)
  # add the new attribute to the created instance
  obj.info = info

  # Finally, we must return the newly created object:
  return obj
#+END_SRC
*** argument checks
#+NAME: coordinateNewCheck
#+BEGIN_SRC python
  # Sanitizing x and y values
  if (
      x is None or 
      y is None or 
      theta is None
     ):
    raise ValueError('Incomplete coordinate input. Please enter valid x, y & theta')

  def is_number(s):
      try:
          float(s)
          return True
      except ValueError:
          return False

  if (
      not (is_number(x) and 
           is_number(y) and
           is_number(theta)
          )
     ):
    raise ValueError('Incorrect input. Please use numbers only for x, y & theta arguments')
#+END_SRC

** array finalize
#+NAME: coordinateArrayFinalize
#+BEGIN_SRC python
  def __array_finalize__(self, obj):
    # see InfoArray.__array_finalize__ for comments
    if obj is None: return
    self.info = getattr(obj, 'info', None)
 #+END_SRC

** add
#+NAME: coordinateArrayAdd
#+BEGIN_SRC python
  def __add__(self,other):

    return Coordinate(self["x"][0]     + other["x"][0],
                      self["y"][0]     + other["y"][0],
                      self["theta"][0] + other["theta"][0])
  def __sub__(self,other):

    return Coordinate(self["x"][0]     - other["x"][0],
                      self["y"][0]     - other["y"][0],
                      self["theta"][0] - other["theta"][0])
#+END_SRC

* Robot

Acts as an adapter between the higher-level interface users use and the Instruction class that sends instructions to the robot.

The move function accepts three types of inputs - compass points, vector directions and coordinate points. All three types of inputs are logged and each one updates the current position of the robot.

#+BEGIN_SRC python :tangle robot/robot.py
import piController.position.coordinate as coordinate
import piController.direction.vector as vector
import piController.direction.compass as compass

class Robot(object):
#  def __init__(self):

  def __init__(self,position=None):
    if (position is None) or (type(position) is not Coordinate):
      raise ValueError('Initial location is not specified')
    self.position = position

  def move(self, direction=None,distance=None):
    
    if type(direction) is compass.Compass:
      # The user has given a compass point and expects us to move to that location. This is where things can get a littlw awry.
      directionMove(direction,distance)



    if type(direction) is vector.Vector:
      # The user has given a vector and expects us to move to that location. 
      #If the distance is not specified, simply take the length of the vector. If distance is specified, use the distance instead.
      vectorMove(direction,distance)



    if type(direction) is coordinate.Coordinate:
      # The user has given a coordinate and expects us to move to that coordinate.



  def directionMove(self,direction=None,distance=None):
    # So I'm going to convert the distance into power and time values. Not very clean but it should work for now.

    instruction = Instruction(direction = 1, power = 100, time = 1000)
    instruction.execute()
    instruction.stop()




  
  def vectorMove(self,vector=None,distance=None):
    if vector is None:
      raise ValueError("The vector input is not specified.")
    if type(vector) is not vector.Vector:
      raise ValueError("The vector input needs to be a vector")

    if distance is None:
    # If distance is none, change distance to the magnitude of the vector and use that.
      distance = vector.mag()
      
    #Convert the vector input into its norm. We're just going to divide the vector by its magnitude.
    vector = vector/vector.mag()

    #Voodoo magic here

    instruction = Instruction(direction = 1, power = 100, time = 1000)
    instruction.execute()
    instruction.stop()



  def coordinateMove(self,coordinate = None):
    if vector is None:
      raise ValueError("The coordinate input is not specified.")
    if type(vector) is not vector.Vector:
      raise ValueError("The coordinate input needs to be a coordinate")


    # Voodoo magic happens here





#+END_SRC 


* Library Information
Just doing normal python library stuff. Consider it unimportant unless someone complains that they can't access something.






