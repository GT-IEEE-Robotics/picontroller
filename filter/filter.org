


* Objective

To create mutiple general use filters that can be reused. Based on top of numpy or scipy.


* Distance Sensor Filter

The type of filter we're using is a IIR - Infinite Impulse Response. It's the easist kind of filter you can think of and we'll be messing around with it for now.

#+NAME: API Reference
#+BEGIN_EXAMPLE
f = Sensor(initialPosition = arg1,      # Optional Argument of type numpy array
           parameter       = arg2       # Optional Argument of type float
          )

f.predict()       # Returns a list of position vectors
f.update(z)       # Plugs in a numpy array to update the Kalman filter with new measurementValues
#+END_EXAMPLE


#+BEGIN_SRC python :tangle filter/sensor.py :noweb yes
import numpy as np
import warnings #Used primarily to give warnings about default values
import logging  #Used to log information that might help with debugging


from ...2018.picontroller import coordinate


logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)



class IIR(object):

  <<sensorInit>>
  <<sensorUpdate>>
  <<sensorErrorEstimate>>
  <<sensorQuery>>

if __name__ == "__main__":

  print("Hello")
  print(sys.modules[__name__])
#+END_SRC

** Init
Creates a sensor object that filters your distance sensor inputs. We'll be doing argument checks to ensure that the inputs given are valid.
We'll also raise warnings in case the sensor has a default argument - explicit values are always better than assuming the default works.

#+NAME: sensorInit
#+BEGIN_SRC python
def __init__(self,parameter,
                  resolution,
                  initialEstimate,
                  linearTransform,
                  offset):

  # Creates a logger for this class.
  logger.info('Creating a Sensor Object')

  <<parameterCheck>>
  <<initialEstimateCheck>>
  <<resolutionCheck>>
  <<linearTransformCheck>>
  <<offsetCheck>>

  logger.info('Sensor Object created')
#+END_SRC
*** Parameter
#+NAME: parameterCheck
#+BEGIN_SRC python
if parameter is None:
  raise ValueError("""No sensitivity parameter passed to Sensor. Must lie between 1 & 0.
                      This parameter decides the relative importance between your current estimate and the measurements you give it.
                      The closer to zero, the less sensitive you are to new inputs and vice versa.""")
elif not 0 < parameter < 1:
  raise ValueError("Parameter must lie between zero and one.")
else:
  self.parameter = parameter

logger.debug('Parameter passed to Sensor object: %s',self.parameter)
#+END_SRC

*** Initial estimate
#+NAME: initialEstimateCheck
#+BEGIN_SRC python
if initialEstimate is None:
  warnings.warn("""Initial sensor estimate is not provided.
                   Defaulting to numpy array of zeros.
                   Sensor is better if initial estimate is given.""")
  self.estimate = np.array([0.,   #1
                            0.,   #2
                            0.,   #3
                            0.,   #4
                            0.,   #5
                            0.,   #6
                            0.,   #7
                            0.])  #8
else:
  self.estimate = initialEstimate

logger.debug('Initial Estimate passed to Sensor object: %s',self.estimate)
#+END_SRC

*** Resolution
Why does this parameter exist?
#+NAME: resolutionCheck
#+BEGIN_SRC python
if resolution is None:
  raise ValueError("Invalid argument: Enter valid resolution")
else:
  self.resolution = resolution

logger.debug('Resolution passed to Sensor object: %s',self.resolution)
#+END_SRC

*** Linear transform
#+NAME: linearTransformCheck
#+BEGIN_SRC python
if linearTransform is None:
  self.linearTransform = np.eye(2)*100
else:
  self.linearTransform = linearTransform

logger.debug('linear transform passed to Sensor object: %s',self.linearTransform)
#+END_SRC

*** Offset
#+NAME: offsetCheck
#+BEGIN_SRC python
if offset is None: 
  self.offset = np.array([0,0])
  warnings.warn("""Initial offset is not provided.
                 Defaulting to numpy array of zeros.""")
else:
  self.offset = offset

logger.debug('Offset passed to Sensor object: %s',self.offset)
#+END_SRC


** Update
The update function accepts a new measurement and updates its measurement. The parameter variable is used to give importance to either the estimate we have or the new measurement we receive.
Since our distance sensors are fairly reliable, it wouldn't hurt to make the parameter value close to 1.
#+NAME:sensorUpdate
#+BEGIN_SRC python
def update(self, current):
  if current is None:
    logger.debug("No new measurement passed to filter.")
    raise ValueError("No new measurement passed to the filter.")
  elif current.shape is not self.estimate.shape:
    logger.info("Current estimate & Measurement mismatch")
    logger.debug("Current measurement shape  : %s", current.shape)
    logger.debug("Estimated measurement shape: %s", self.estimate.shape)
    raise ValueError("The new measurement has a different dimension than the estimate.")
  else:
    logger.debug("New measurement passed to filter ")
    self.estimate = self.estimate * (1. - self.parameter) + current * (self.parameter)
#+END_SRC
** Error Estimate Function
The error estimate of a measurement increases with distance ie the further away an object is, the less certain you are about the validity of your measurement.
Since we have a bunch of sensors all around our robot (but all the sensors are identical), it's better to include error estimates in our logic.
#+NAME: sensorErrorEstimate
#+BEGIN_SRC python
def errorEstimate(self,distance):
  # insert a dict for the distance error estimates.
  # Make it a vectorized function for this.

  return np.ones(distance.shape)
#+END_SRC

** Query Function
#+NAME: sensorQuery
#+BEGIN_SRC python
def query(self):
  A = self.estimate

  #Get the average of every two intervals.   
  A = A.reshape(reshape((A.size/2, 2)))
  A = A.sum(axis=1) / 2

  # Weight our measurements in terms of the error estimates
  eA = self.errorEstimate(A)
  denom = eA[:2] + eA[2:]
  denom = np.concatenate((denom,denom))
  A     = np.multiply(A,eA[   [2,3,0,1]   ]) / denom




  # Finding the difference between every other element of form [C - A, D - B]
  coordinate = (A[[2,3]]  - A[[0,1]]) / 2      # of form x & y
  print "poop"
  print coordinate
  # Converting our coordinate into something someone else can use intuitively
  coordinate = coordinate
  coordinate = np.dot(self.linearTransform,coordinate) + self.offset
  print coordinate
  coordinate = coordinate  //  self.resolution                 # divides it by the required resolution
  print coordinate
  # Finding the "theta" of the inclination of the robot.
  A = self.estimate
  #Get the average of every two intervals.       
  A = A[::2] - A[1::2]
  A = A[np.argsort(eA)]       # Sort in terms of lower errorEstimate
  theta = np.sum(A[:2:1])
  ans = {}
  ans["x"]     = coordinate[0]
  ans["y"]     = coordinate[1]
  ans["theta"] = theta
  return ans
#+END_SRC








* Kalman Filter
This is definitely not a copy paste from the internet. Pinky promise. 

So we have a bunch of linear data with Gaussian noise. Best filter to use is a Kalman filter than gives us accurate-ish values.



** API Reference

It's pretty simple since you effectively have just two things - inserting data into the Kalman filter & querying it for an estimate.

#+BEGIN_EXAMPLE
f = Kalman(initialPosition = arg1,      # Optional Argument of type numpy array
           timeStep        = arg2       # Optional Argument of type float
           )

f.predict()       # Returns a list of position vectors
f.update(z)       # Plugs in a numpy array to update the Kalman filter with new measurementValues
#+END_EXAMPLE


#+BEGIN_SRC python :tangle filter/KalmanFilter.py :noweb yes
from filterpy.kalman import KalmanFilter
class Kalman(object):

  def __init__(self,initialPosition,timeStep):

    <<initializationKalman>>
    <<initialPositionMatrix>>
    <<stateTransitionMatrix>>
    <<measurementMatrix>>
    <<processNoiseMatrix>>
    <<measurementNoise>>

  def predict(self):
    stuff = self.f.predict()

    return [x = ,
            y = ,
            theta = ] 


  def update(self,z):
    if z is None:
      raise ValueError("You have passed no value to update the Kalman Filter")
    
    self.f.update(z)

#+END_SRC

** Kalman Filter Initialization
#+NAME: initializationKalman
#+BEGIN_SRC python  :noweb yes
# Number of types of data we're getting. Since the distance sensor only cares about position, we only use position
dimX = 2
# Number of distance sensor we have
dimZ = 1
self.f = KalmanFilter(dim_x=dimX, dim_z=dimZ)
#+END_SRC

** Initial Position Vector

The initial position vector serves as the initial guess about the robot's position. The closer we are to real life, the less time it takes for the Kalman filter to reach acceptable results.
We know that the initial velocities are always zero as the robot is at rest. The initial positions are something to figure out when it comes to actually testing out the robot.

My suggestion would be to either hardcode the position into this file or make an init file that takes in some position matrix.

The initial position vector is 16 * 1 in order to account for both the velocity & position of eight different sensors.

#+NAME: initialPositionMatrix
#+BEGIN_SRC python :noweb yes
# Initial Position & Velocity Matrix

if initialPosition is None: 
  self.f.x = np.array([0., 0.,             #1
                       0., 0.,             #2
                       0., 0.,             #3
                       0., 0.,             #4
                       0., 0.,             #5
                       0., 0.,             #6
                       0., 0.,             #7
                       0., 0. ])           #8
  # Insert warning over here when you figure out which library you're using.

elif isinstance(initialPosition,List):  
  initialPosition = nd.array(initialPosition) 
  self.f.x = initialPosition
  # Insert warning over passing non-numpy arrays into this function


else:
  self.f.x = initialPosition
  # You should really check if this is a numpy array and not some random bullshit.
#+END_SRC

** State Transition Matrix

The state transition matrix is used to model the relationships between the positions and velocities.

#+BEGIN_LATEX
\begin{equation}
x_i = x_i + x_i* * deltat
v_i = x_i*
\end{equation}
#+END_LATEX

The term delta t is the timestep between measurements. We could make it slower than the actual refresh rate of the sensors but it would be best to experiment with an actual value.

#+NAME: stateTransitionMatrix
#+BEGIN_SRC python :noweb yes
# State transition matrix
if timeStep is None:
  dt = 0.001     # Time step is in the order of milliseconds
else:
  dt = timeStep

self.f.F = np.array([[1., dt, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 1., dt, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 1., dt, 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 1., dt, 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 1., dt, 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., dt, 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., dt, 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., dt],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1.]])
#+END_SRC     

** Measurement Matrix

The measurement matrix is a way to convert the matrices that the kalman filter uses into the matrices that we want to see. 
In our case, we only care about the positions given by the Kalman filter and not the velocity - dumping the velocity makes sense here.

matrixA is one way of converting a vector of cardinality 16 into a vector of cardinality 8 while skipping every second element.
#+NAME: measurementMatrix
#+BEGIN_SRC python :noweb yes
# Measurement function

# Effectively reduces the position & velocity vector to just a position vector
matrixA =  np.array([[1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0., 0., 0.],
                     [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 1., 0.]])

self.f.H = matrixA       # Why am I calling this matrixA instead of just assigning it directly? Because I might needto switch out stuff later. Fuck YAGNI.
#+END_SRC

** Process Noise

So the process noise is a a matrix that lists the variance between the different sensors. In reality, some sensors will have a high degree of covariance if they are on the same face ie they will have (almost) the same data.
For now, we've assumed that there is no dependence on each other because Vi is too fucking lazy to read theory.

#+NAME: processNoiseMatrix
#+BEGIN_SRC python :noweb yes
# The process noise is np.eye(dim_x) by default so you can just multiply by some constant
# This assumes that each sensor is independent from each other.
self.f.P *= 1000.
#+END_SRC
** Measurement Noise

No clue what this is. Philip, pls halp.
#+NAME: measurementNoise
#+BEGIN_SRC python :noweb yes
# Measurement noise
self.f.R = 5
#+END_SRC



** Old implementation
:ARCHIVE:
#+BEGIN_SRC python :tangle no

# filter/kalmanFilter.py

class KalmanFilter(object):

    def __init__(self, processVariance, estimatedMeasurementVariance):
        self.processVariance = processVariance
        self.estimatedMeasurementVariance = estimatedMeasurementVariance
        self.posteriEstimate = 0.0
        self.posteriErrorEstimate = 1.0

    def inputMeasurement(self, measurement):
        prioriEstimate = self.posteriEstimate
        prioriErrorEstimate = self.posteriErrorEstimate + self.processVariance

        blending_factor = prioriErrorEstimate / (prioriErrorEstimate + self.estimatedMeasurementVariance)
        self.posteriEstimate = prioriEstimate + blendingFactor * (measurement - prioriEstimate)
        self.posteriErrorEstimate = (1 - blendingFactor) * prioriErrorEstimate

    def getEstimate(self):
        return self.posteriEstimate


if __name__ == "__main__":
    import random
    iteration_count = 500

    actual_values     = [-0.37727 + j * j * 0.00001 for j in xrange(iteration_count)]
    noisy_measurement = [random.random() * 2.0 - 1.0 + actual_val for actual_val in actual_values]

    # in practice we would take our sensor, log some readings and get the
    # standard deviation
    import numpy
    measurement_standard_deviation = numpy.std([random.random() * 2.0 - 1.0 for j in xrange(iteration_count)])

    # The smaller this number, the fewer fluctuations, but can also venture off
    # course...
    process_variance = 1e-3
    estimated_measurement_variance = measurement_standard_deviation ** 2  # 0.05 ** 2
    kalman_filter = KalmanFilter(process_variance, estimated_measurement_variance)
    posteri_estimate_graph = []

    for iteration in xrange(1, iteration_count):
        kalman_filter.input_latest_noisy_measurement(noisy_measurement[iteration])
        posteri_estimate_graph.append(kalman_filter.get_latest_estimated_measurement())


    import pylab
    pylab.figure()
    pylab.plot(noisy_measurement, color='r', label='noisy measurements')
    pylab.plot(posteri_estimate_graph, 'b-', label='a posteri estimate')
    pylab.plot(actual_values, color='g', label='truth value')
    pylab.legend()
    pylab.xlabel('Iteration')
    pylab.ylabel('Voltage')
    pylab.show()

#+END_SRC


